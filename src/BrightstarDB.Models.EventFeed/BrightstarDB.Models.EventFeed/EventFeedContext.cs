 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;


namespace BrightstarDB.Models.EventFeed 
{
    public partial class EventFeedContext : BrightstarEntityContext {
    	private static readonly EntityMappingStore TypeMappings;
    	
    	static EventFeedContext() 
    	{
    		TypeMappings = new EntityMappingStore();
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Models.EventFeed.IEvent));
    		TypeMappings.AddImplMapping<BrightstarDB.Models.EventFeed.IEvent, BrightstarDB.Models.EventFeed.Event>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Models.EventFeed.ISubscriber));
    		TypeMappings.AddImplMapping<BrightstarDB.Models.EventFeed.ISubscriber, BrightstarDB.Models.EventFeed.Subscriber>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Models.EventFeed.ITopic));
    		TypeMappings.AddImplMapping<BrightstarDB.Models.EventFeed.ITopic, BrightstarDB.Models.EventFeed.Topic>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the Brightstar Data Object Store that will provide the entity objects</param>
    	public EventFeedContext(IDataObjectStore dataObjectStore) : base(TypeMappings, dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
    	public EventFeedContext(string connectionString, bool? enableOptimisticLocking=null) : base(TypeMappings, connectionString, enableOptimisticLocking)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public EventFeedContext() : base(TypeMappings)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Events = 	new BrightstarEntitySet<BrightstarDB.Models.EventFeed.IEvent>(this);
    		Subscribers = 	new BrightstarEntitySet<BrightstarDB.Models.EventFeed.ISubscriber>(this);
    		Topics = 	new BrightstarEntitySet<BrightstarDB.Models.EventFeed.ITopic>(this);
    	}
    	
    	public IEntitySet<BrightstarDB.Models.EventFeed.IEvent> Events
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Models.EventFeed.ISubscriber> Subscribers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Models.EventFeed.ITopic> Topics
    	{
    		get; private set;
    	}
    	
    }
}
namespace BrightstarDB.Models.EventFeed 
{
    public partial class Event : BrightstarEntityObject, IEvent 
    {
    	public Event(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Event() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BrightstarDB.Models.EventFeed.IEvent
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public System.DateTime Occurred
    	{
            		get { return GetRelatedProperty<System.DateTime>("Occurred"); }
            		set { SetRelatedProperty("Occurred", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Models.EventFeed.ITopic> Topics
    	{
    		get { return GetRelatedObjects<BrightstarDB.Models.EventFeed.ITopic>("Topics"); }
    		set { SetRelatedObjects("Topics", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Models.EventFeed 
{
    public partial class Subscriber : BrightstarEntityObject, ISubscriber 
    {
    	public Subscriber(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Subscriber() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BrightstarDB.Models.EventFeed.ISubscriber
    
    	public System.String UserName
    	{
            		get { return GetRelatedProperty<System.String>("UserName"); }
            		set { SetRelatedProperty("UserName", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Models.EventFeed.ITopic> Topics
    	{
    		get { return GetRelatedObjects<BrightstarDB.Models.EventFeed.ITopic>("Topics"); }
    		set { SetRelatedObjects("Topics", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Models.EventFeed.IEvent> Events
    	{
    		get { return GetRelatedObjects<BrightstarDB.Models.EventFeed.IEvent>("Events"); }
    		set { SetRelatedObjects("Events", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Models.EventFeed 
{
    public partial class Topic : BrightstarEntityObject, ITopic 
    {
    	public Topic(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Topic() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BrightstarDB.Models.EventFeed.ITopic
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Models.EventFeed.IEvent> Events
    	{
    		get { return GetRelatedObjects<BrightstarDB.Models.EventFeed.IEvent>("Events"); }
    		set { SetRelatedObjects("Events", value); }
    								}
    	#endregion
    }
}
